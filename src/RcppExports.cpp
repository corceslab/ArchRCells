// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// col_mins_id_cpp
arma::uvec col_mins_id_cpp(arma::mat& X);
RcppExport SEXP _ArchRCells_col_mins_id_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(col_mins_id_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// sp_col_mins_id_cpp
arma::uvec sp_col_mins_id_cpp(arma::sp_mat& X);
RcppExport SEXP _ArchRCells_sp_col_mins_id_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_col_mins_id_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// update_B_cpp
arma::sp_mat update_B_cpp(arma::sp_mat& A, arma::sp_mat B, const arma::sp_mat& K, int& it, int t, bool verbose);
RcppExport SEXP _ArchRCells_update_B_cpp(SEXP ASEXP, SEXP BSEXP, SEXP KSEXP, SEXP itSEXP, SEXP tSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< int& >::type it(itSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B_cpp(A, B, K, it, t, verbose));
    return rcpp_result_gen;
END_RCPP
}
// update_B_cpp_sp
arma::sp_mat update_B_cpp_sp(arma::sp_mat& A, arma::sp_mat B, const arma::sp_mat& K, int& it, int t, bool verbose);
RcppExport SEXP _ArchRCells_update_B_cpp_sp(SEXP ASEXP, SEXP BSEXP, SEXP KSEXP, SEXP itSEXP, SEXP tSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< int& >::type it(itSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B_cpp_sp(A, B, K, it, t, verbose));
    return rcpp_result_gen;
END_RCPP
}
// initialize_A_cpp
arma::mat initialize_A_cpp(const int& nr, const int& nc);
RcppExport SEXP _ArchRCells_initialize_A_cpp(SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int& >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_A_cpp(nr, nc));
    return rcpp_result_gen;
END_RCPP
}
// initialize_A_idx
arma::uvec initialize_A_idx(const arma::sp_mat& t1, const arma::sp_mat& t2, bool verbose);
RcppExport SEXP _ArchRCells_initialize_A_idx(SEXP t1SEXP, SEXP t2SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_A_idx(t1, t2, verbose));
    return rcpp_result_gen;
END_RCPP
}
// update_A_cpp
arma::sp_mat update_A_cpp(arma::sp_mat A, arma::sp_mat& B, const arma::sp_mat& K, int& it, int t, bool verbose);
RcppExport SEXP _ArchRCells_update_A_cpp(SEXP ASEXP, SEXP BSEXP, SEXP KSEXP, SEXP itSEXP, SEXP tSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< int& >::type it(itSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(update_A_cpp(A, B, K, it, t, verbose));
    return rcpp_result_gen;
END_RCPP
}
// update_A_cpp_sp
arma::sp_mat update_A_cpp_sp(arma::sp_mat A, arma::sp_mat& B, const arma::sp_mat& K, int& it, int t, bool verbose);
RcppExport SEXP _ArchRCells_update_A_cpp_sp(SEXP ASEXP, SEXP BSEXP, SEXP KSEXP, SEXP itSEXP, SEXP tSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< int& >::type it(itSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(update_A_cpp_sp(A, B, K, it, t, verbose));
    return rcpp_result_gen;
END_RCPP
}
// mat_mult_dens_dens_cpp
SEXP mat_mult_dens_dens_cpp(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::MatrixXd>& B);
RcppExport SEXP _ArchRCells_mat_mult_dens_dens_cpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_mult_dens_dens_cpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// mat_mult_dens_sp_cpp
SEXP mat_mult_dens_sp_cpp(const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::SparseMatrix<double>& B);
RcppExport SEXP _ArchRCells_mat_mult_dens_sp_cpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_mult_dens_sp_cpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// mat_mult_sp_dens_cpp
SEXP mat_mult_sp_dens_cpp(const Eigen::SparseMatrix<double>& A, const Eigen::Map<Eigen::MatrixXd>& B);
RcppExport SEXP _ArchRCells_mat_mult_sp_dens_cpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_mult_sp_dens_cpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// mat_mult_sp_sp_cpp
SEXP mat_mult_sp_sp_cpp(const Eigen::SparseMatrix<double>& A, const Eigen::SparseMatrix<double>& B);
RcppExport SEXP _ArchRCells_mat_mult_sp_sp_cpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_mult_sp_sp_cpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// determine_waypoints_cpp
arma::uvec determine_waypoints_cpp(arma::colvec& v, int& idx, int& N, int& it, int& nc, bool verbose);
RcppExport SEXP _ArchRCells_determine_waypoints_cpp(SEXP vSEXP, SEXP idxSEXP, SEXP NSEXP, SEXP itSEXP, SEXP ncSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< int& >::type it(itSEXP);
    Rcpp::traits::input_parameter< int& >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(determine_waypoints_cpp(v, idx, N, it, nc, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ArchRCells_col_mins_id_cpp", (DL_FUNC) &_ArchRCells_col_mins_id_cpp, 1},
    {"_ArchRCells_sp_col_mins_id_cpp", (DL_FUNC) &_ArchRCells_sp_col_mins_id_cpp, 1},
    {"_ArchRCells_update_B_cpp", (DL_FUNC) &_ArchRCells_update_B_cpp, 6},
    {"_ArchRCells_update_B_cpp_sp", (DL_FUNC) &_ArchRCells_update_B_cpp_sp, 6},
    {"_ArchRCells_initialize_A_cpp", (DL_FUNC) &_ArchRCells_initialize_A_cpp, 2},
    {"_ArchRCells_initialize_A_idx", (DL_FUNC) &_ArchRCells_initialize_A_idx, 3},
    {"_ArchRCells_update_A_cpp", (DL_FUNC) &_ArchRCells_update_A_cpp, 6},
    {"_ArchRCells_update_A_cpp_sp", (DL_FUNC) &_ArchRCells_update_A_cpp_sp, 6},
    {"_ArchRCells_mat_mult_dens_dens_cpp", (DL_FUNC) &_ArchRCells_mat_mult_dens_dens_cpp, 2},
    {"_ArchRCells_mat_mult_dens_sp_cpp", (DL_FUNC) &_ArchRCells_mat_mult_dens_sp_cpp, 2},
    {"_ArchRCells_mat_mult_sp_dens_cpp", (DL_FUNC) &_ArchRCells_mat_mult_sp_dens_cpp, 2},
    {"_ArchRCells_mat_mult_sp_sp_cpp", (DL_FUNC) &_ArchRCells_mat_mult_sp_sp_cpp, 2},
    {"_ArchRCells_determine_waypoints_cpp", (DL_FUNC) &_ArchRCells_determine_waypoints_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_ArchRCells(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
